apply plugin: 'com.android.library'
android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    defaultConfig {
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode rootProject.ext.versionCode
        versionName rootProject.ext.versionName
        //testInstrumentationRunner

    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }

    lintOptions {
        quiet true
        abortOnError false
        ignoreWarnings true
    }
}
configurations {

}
dependencies {
    compile 'com.loopj.android:android-async-http:1.4.9'
    compile 'com.android.support:support-v4:23.4.0'
    compile 'org.greenrobot:eventbus:3.0.0'
    compile 'com.loopj.android:android-async-http:1.4.9'
    compile 'com.google.code.gson:gson:2.6.2'
    //    compile('com.stanfy:gson-xml-java:0.1.+') {
    //        exclude group: 'xmlpull', module: 'xmlpull'
    //    }
    testCompile 'org.robolectric:robolectric:3.1'
    testCompile 'org.robolectric:shadows-httpclient:3.1'
    testCompile 'junit:junit:4.12'
    testCompile 'org.mockito:mockito-core:1.9.5'
    testCompile 'com.android.support.test:runner:0.5'
    testCompile 'com.android.support:support-annotations:23.4.0'
}
//task copyLintJar(type: Copy) {
//    from (configurations.lintChecks) {
//        rename {
//            String fileName ->
//                'lint.jar'
//        }
//    }
//    into 'build/intermediates/lint/'
//}
//project.afterEvaluate {
//    def compileLintTask = project.tasks.find { it.name == 'compileLint' }
//    compileLintTask.dependsOn(copyLintJar)
//}
tasks.withType(Test) {
    systemProperty "robolectric.logging", "stdout"
}
/* maven deploy + signing */
task javadocs(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
}
task javadocsJar(type: Jar, dependsOn: javadocs) {
    classifier = 'javadoc'
    from javadocs.destinationDir
}
task sourcesJar(type: Jar) {
    classifier = 'sources'
    from android.sourceSets.main.java.srcDirs
}
//task releaseJar(type: Jar, dependsOn: android.libraryVariants.release.javaCompile) {
//    from projectDir.path + '/build/intermediates/classes/release/'
//    from {
//        configurations.compile.findAll {
//            it.getName() == paypalVersion
//        }.collect {
//            it.isDirectory() ? it : zipTree(it)
//        }
//    }
//    exclude { details -> details.file.name.endsWith('.xml') }
//}
artifacts {
    archives javadocsJar
    archives sourcesJar
//    archives releaseJar
}

